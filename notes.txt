VPC Best Practices:

Creating a Virtual Private Cloud (VPC) in AWS requires careful planning to ensure it's secure, scalable, and cost-effective. Here are some best practices to follow:

1. Plan Your IP Addressing
CIDR Block Selection: Choose a CIDR block that fits your needs while allowing for future growth. A common choice is /16 for large networks or /24 for smaller, more isolated networks.
Avoid Overlapping: Ensure your VPC’s CIDR block doesn’t overlap with other networks you might need to connect to, such as on-premises networks or other VPCs.
2. Design Subnet Layout
Public and Private Subnets: Separate your public and private resources into different subnets. Public subnets are for resources that need direct internet access (e.g., load balancers, web servers), while private subnets are for resources that do not need direct internet access (e.g., databases, application servers).
Subnet Sizing: Allocate appropriate CIDR blocks for each subnet based on the expected number of instances and future growth. Aim for smaller subnets where possible to avoid wasted IP addresses.
3. Use Multiple Availability Zones
High Availability: Distribute your resources across multiple Availability Zones (AZs) to increase fault tolerance and availability. At least two AZs are recommended for most production environments.
AZ Design: Ensure that critical resources are spread across AZs to minimize the impact of an AZ failure.
4. Implement Security Controls
Network ACLs and Security Groups: Use Network ACLs (NACLs) for subnet-level security and Security Groups for instance-level security. Ensure Security Groups follow the principle of least privilege, allowing only the required inbound and outbound traffic.
VPN and PrivateLink: Use AWS VPN or AWS PrivateLink to securely connect to your on-premises network or other VPCs without exposing traffic to the public internet.
5. Configure Route Tables
Route Table Segmentation: Use separate route tables for public and private subnets. Public subnets should have a route to the internet via an Internet Gateway (IGW), while private subnets can use a NAT Gateway or NAT Instance for outbound internet access.
Custom Routes: Define custom routes to direct traffic between subnets, to peered VPCs, or to on-premises networks as needed.
6. Implement Network Monitoring and Logging
VPC Flow Logs: Enable VPC Flow Logs to capture information about IP traffic going to and from network interfaces in your VPC. This helps with troubleshooting and security analysis.
CloudWatch and CloudTrail: Use CloudWatch for monitoring and alerting on VPC and instance metrics. CloudTrail can provide detailed logs of API calls for audit and compliance purposes.
7. Optimize Costs
NAT Gateway vs. NAT Instance: For cost-effective outbound internet access from private subnets, consider using NAT Gateways for high availability or NAT Instances for lower cost, but with more management overhead.
Reserved IPs: If using AWS Direct Connect, consider reserving IP addresses to avoid additional costs.
8. Adopt a VPC Peering Strategy
Peering Connections: Use VPC Peering for secure, low-latency connections between VPCs within the same or different regions. Ensure the peering connection is set up with appropriate routing and security group rules.
Limit Peering: Avoid complex peering relationships by limiting the number of peered VPCs and using Transit Gateway if you have a large number of VPCs.
9. Automate and Document
Infrastructure as Code: Use tools like AWS CloudFormation or Terraform to define and manage your VPC infrastructure as code, allowing for easier replication and management.
Documentation: Maintain detailed documentation of your VPC architecture, including subnet configurations, route tables, security settings, and connectivity.
10. Regular Reviews and Updates
Periodic Audits: Regularly review your VPC configuration to ensure it meets your current needs and security best practices. Adjust configurations as necessary to accommodate changes in your infrastructure or organizational requirements.
Update Policies: Keep security policies and rules up-to-date in response to emerging threats and changes in your operational environment.
By following these best practices, you can build a robust and scalable VPC that meets your security, performance, and cost requirements.





Help me devise a plan to set up prometheus and grafana using terraform on aws. Also, list an order of operations for which aws resources that are required, should be set up. Additionally integrate the required resources with the existing infrastructure that I have in these files: 

vpc.tf
# Create the VPC
resource "aws_vpc" "vpc_primary" {
  cidr_block           = var.cidr_block
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags = {
    Name = var.vpc_name
  }
}

# Create Subnets
resource "aws_subnet" "subnet" {
  for_each = var.subnet_cidr_blocks

  vpc_id                  = aws_vpc.vpc_primary.id
  cidr_block              = each.value
  availability_zone       = element(var.availability_zones, index(keys(var.subnet_cidr_blocks), each.key))
  map_public_ip_on_launch = each.key == "public"
  tags = {
    Name = "${each.key}-${index(keys(var.subnet_cidr_blocks), each.key)}"
  }
}

# Create Route Tables
resource "aws_route_table" "route_table" {
  for_each = var.subnet_cidr_blocks

  vpc_id = aws_vpc.vpc_primary.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw_primary.id
  }
  tags = {
    Name = "${each.key}-route-table"
  }
}

# Associate Subnets with Route Tables
resource "aws_route_table_association" "subnet_rt_associations" {
  for_each = var.subnet_cidr_blocks

  subnet_id      = aws_subnet.subnet[each.key].id
  route_table_id = aws_route_table.route_table[each.key].id
}

# Create an Internet Gateway
resource "aws_internet_gateway" "igw_primary" {
  vpc_id = aws_vpc.vpc_primary.id
  tags = {
    Name = "igw-main"
  }
}

# Create a NAT Gateway
resource "aws_eip" "nat_eip" {
  count = length(var.availability_zones)
}

resource "aws_nat_gateway" "nat_gw_primary" {
  count         = length(var.availability_zones)
  allocation_id = aws_eip.nat_eip[count.index].id
  subnet_id     = aws_subnet.subnet["public"].id
  tags = {
    Name = "nat-gateway-${count.index}"
  }
}

# Route for NAT Gateway
resource "aws_route" "nat_route" {
  count                  = length(var.availability_zones)
  route_table_id         = aws_route_table.route_table["private"].id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id         = aws_nat_gateway.nat_gw_primary[count.index].id
}

# Create Network ACLs
resource "aws_network_acl" "acl" {
  for_each = {
    "apps"    = {}
    "private" = {}
  }

  vpc_id = aws_vpc.vpc_primary.id
  tags = {
    Name = "${each.key}-acl"
  }
}

# Create Network ACL Rules
resource "aws_network_acl_rule" "acl_rule" {
  for_each = {
    "apps_inbound"     = { acl = "apps", egress = false, port = 80 }
    "apps_outbound"    = { acl = "apps", egress = true, port = 80 }
    "private_inbound"  = { acl = "private", egress = false, port = 22 }
    "private_outbound" = { acl = "private", egress = true, port = 22 }
  }

  network_acl_id = aws_network_acl.acl[each.value.acl].id
  rule_number    = 100
  protocol       = "tcp"
  rule_action    = "allow"
  egress         = each.value.egress
  cidr_block     = "0.0.0.0/0"
  from_port      = each.value.port
  to_port        = each.value.port
}

buckets.tf:
### S3 Bucket Definitions ###
resource "aws_s3_bucket" "buckets" {
  for_each = var.buckets

  bucket        = each.key
  force_destroy = true
}

### S3 Bucket Website Configuration ###
resource "aws_s3_bucket_website_configuration" "website_config" {
  for_each = {
    for bucket_name, config in var.buckets : bucket_name => config if bucket_name == "zb-me-prod"
  }

  bucket = aws_s3_bucket.buckets[each.key].id

  index_document {
    suffix = "index.html"
  }

  error_document {
    key = "error.html"
  }
}

### S3 Bucket Server-Side Encryption Configuration ###
resource "aws_s3_bucket_server_side_encryption_configuration" "sse_config" {
  for_each = { for bucket_name, config in var.buckets : bucket_name => config if config.enable_encryption }

  bucket = aws_s3_bucket.buckets[each.key].id

  rule {
    apply_server_side_encryption_by_default {
      kms_master_key_id = aws_kms_key.kms_master_key.arn
      sse_algorithm     = "aws:kms"
    }
  }

  depends_on = [aws_s3_bucket.buckets]
}

### S3 Bucket Lifecycle Configurations ###
resource "aws_s3_bucket_lifecycle_configuration" "lifecycle_configuration" {
  for_each = { for bucket_name, config in var.buckets : bucket_name => config if config.lifecycle }

  bucket = aws_s3_bucket.buckets[each.key].id

  rule {
    id     = "storage-class-transition"
    status = "Enabled"
    transition {
      days          = 30
      storage_class = "ONEZONE_IA"
    }
  }

  rule {
    id     = "expire-objects"
    status = "Enabled"
    filter {
      prefix = "" # Empty prefix means the rule applies to all objects
    }
    expiration {
      days = 90 # Number of days after which the objects will be deleted
    }
  }

  depends_on = [aws_s3_bucket.buckets]
}

### S3 Bucket Policies ###
resource "aws_s3_bucket_policy" "bucket_policies" {
  for_each = { for bucket_name, config in var.buckets : bucket_name => config if config.policy != "" }

  bucket = aws_s3_bucket.buckets[each.key].id
  policy = each.value.policy

  depends_on = [aws_s3_bucket.buckets]
}

variables.tf:
##########################
#     IAM Variables      #
##########################
variable "iam_users" {
  description = "List of IAM users"
  type = list(object({
    name   = string
    groups = list(string)
  }))
  default = []
}

variable "iam_groups" {
  description = "List of IAM groups"
  type = list(object({
    name     = string
    policies = list(string)
  }))
  default = []
}

variable "iam_policies" {
  description = "List of IAM policies"
  type = list(object({
    name            = string
    policy_document = string
  }))
  default = []
}

variable "policy_attachments" {
  description = "List of policy attachments"
  type = list(object({
    group  = string
    policy = string
  }))
  default = []
}

##########################
# S3 Bucket Variables    #
##########################
variable "buckets" {
  description = "Map of bucket configurations."
  type = map(object({
    lifecycle         = bool
    enable_encryption = bool
    policy            = string
  }))
  default = {}
}

##########################
#     VPC Variables      #
##########################
variable "vpc_name" {
  description = "The name of the VPC"
  default     = "vpc-primary"
}

variable "cidr_block" {
  description = "The CIDR block for the VPC"
  default     = "10.0.0.0/16"
}

variable "subnet_cidr_blocks" {
  description = "CIDR blocks for subnets"
  type        = map(string)
  default = {
    public   = "10.0.1.0/24"
    private  = "10.0.2.0/24"
    apps     = "10.0.3.0/24"
    external = "10.0.4.0/24"
  }
}

variable "availability_zones" {
  description = "List of availability zones"
  type        = list(string)
  default     = ["us-east-1a", "us-east-1b"]
}

##########################
#  CloudFront Variables  #
##########################
variable "cloudfront_distributions" {
  description = "Map of CloudFront distributions to create."
  type = map(object({
    aliases                = list(string)
    error_caching_min_ttl  = number
    error_code             = string
    response_code          = string
    response_page_path     = string
    cache_policy_id        = string
    target_origin_id       = string
    viewer_protocol_policy = string
    default_ttl            = number
    max_ttl                = number
    min_ttl                = number
    origin_domain_name     = string
    origin_id              = string
    acm_certificate_arn    = string
  }))
}

variable "cache_policies" {
  description = "Map of CloudFront cache policies to create."
  type = map(object({
    comment       = string
    default_ttl   = number
    max_ttl       = number
    min_ttl       = number
    enable_brotli = bool
    enable_gzip   = bool
  }))
}

variable "origin_access_control" {
  description = "Origin access control settings."
  type = object({
    name             = string
    description      = string
    origin_type      = string
    signing_behavior = string
    signing_protocol = string
  })
}

variable "acm_certificates" {
  description = "Map of ACM certificates to create."
  type = map(object({
    domain_name       = string
    validation_domain = string
  }))
}

##########################
#   Route53 Variables    #
##########################

##############################
#  Secret Manager Variables  #
##############################
variable "secrets" {
  description = "A map containing objects where each ovject define a single secret manager secret"
  default     = {}
  type = map(object({
    secret_recovery = number // Retention Period (in days) for Recovering Deleted Secrets
  }))
}

####################################
# SSM Parameter Store Variables    #
####################################
variable "ssm_parameters" {
  description = "A map containing object where each object defines a single parameter store paremeter"
  default     = {}
  type = map(object({
    parameter_data_type = string // Data Type for SSM Parameters
    parameter_tier      = string // SSM Parameter Tier
    parameter_type      = string // SSM Parameter Type
    parameter_value     = string // SSM Parameter Value
  }))
}

#####################################
#Simple Email Service Identities    #
#####################################
variable "domain_identities" {
  type        = list(string)
  description = "List of domains to use with SES."
  default     = []
}

variable "email_identities" {
  type        = list(string)
  description = "List of email addresses to use with SES."
  default     = []
}

terraform.tfvars:
##########################
# General Variables    #
##########################
#environment    = "prod"
#aws_region     = "us-east-1"

##########################
#          IAM           #
##########################
iam_users = [
  {
    name   = "Administrator"
    groups = ["admin-group", "power-user-access"]
  },
  {
    name   = "developer"
    groups = ["read-access-group"]
  }
]

iam_groups = [
  {
    name     = "admin-group"
    policies = ["AdministratorAccess", "PowerUserAccess"]
  },
  {
    name     = "power-user-access"
    policies = ["PowerUserAccess"]
  },
  {
    name     = "read-access-group"
    policies = ["ReadOnlyAccess"]
  }
]

iam_policies = [
  {
    name            = "AdministratorAccess"
    policy_document = "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":\"*\",\"Resource\":\"*\"}]}"
  },
  {
    name            = "PowerUserAccess"
    policy_document = "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"ec2:*\",\"s3:*\",\"iam:GetUser\",\"iam:ListAttachedUserPolicies\",\"iam:ListAttachedGroupPolicies\",\"iam:ListAttachedRolePolicies\",\"iam:ListGroupPolicies\",\"iam:ListRolePolicies\",\"iam:ListUserPolicies\",\"iam:GetPolicy\",\"iam:GetPolicyVersion\",\"iam:GetUserPolicy\",\"iam:GetGroupPolicy\",\"iam:GetRolePolicy\"],\"Resource\":\"*\"}]}"
  },
  {
    name            = "ReadOnlyAccess"
    policy_document = "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":\"*\",\"Resource\":\"*\"}]}"
  }
]

policy_attachments = [
  {
    group  = "admin-group"
    policy = "AdministratorAccess"
  },
  {
    group  = "power-user-access"
    policy = "PowerUserAccess"
  },
  {
    group  = "read-access-group"
    policy = "ReadOnlyAccess"
  }
]

###############################################
#         S3 Bucket Configuration             #
###############################################
buckets = {
  zb-me-prod = {
    lifecycle         = false
    enable_encryption = true
    policy            = "{\"Id\":\"PolicyForCloudFrontPrivateContent\",\"Statement\":[{\"Action\":\"s3:GetObject\",\"Condition\":{\"StringEquals\":{\"AWS:SourceArn\":\"arn:aws:cloudfront::329599651317:distribution/EQVO2WEK1DO1X\"}},\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"cloudfront.amazonaws.com\"},\"Resource\":\"arn:aws:s3:::zb-me-prod/*\",\"Sid\":\"AllowCloudFrontServicePrincipal\"}],\"Version\":\"2008-10-17\"}"
  }

  site-zb-prod = {
    lifecycle         = false
    enable_encryption = true
    policy            = "" #"{\"Id\":\"PolicyForCloudFrontPrivateContent\",\"Statement\":[{\"Action\":\"s3:GetObject\",\"Condition\":{\"StringEquals\":{\"AWS:SourceArn\":\"arn:aws:cloudfront::767398074970:distribution/ED4TYWEMDMSQZ\"}},\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"cloudfront.amazonaws.com\"},\"Resource\":\"arn:aws:s3:::fasten-client-prod/*\",\"Sid\":\"AllowCloudFrontServicePrincipal\"}],\"Version\":\"2008-10-17\"}"
  }
}

###############################################
#              VPC Configuration              #
###############################################
availability_zones = ["us-east-1a", "us-east-1b"]

subnet_cidr_blocks = {
  public   = "10.0.1.0/24"
  private  = "10.0.2.0/24"
  apps     = "10.0.3.0/24"
  external = "10.0.4.0/24"
}

###############################################
#          CloudFront Configuration           #
###############################################
cloudfront_distributions = {
  "zb_me_cf_distribution" = {
    aliases                = ["app.zach-burkhart.me"]
    error_caching_min_ttl  = 300
    error_code             = "403"
    response_code          = "200"
    response_page_path     = "/index.html"
    cache_policy_id        = "CachingOptimized"
    target_origin_id       = "zb-me-prod.s3.us-east-1.amazonaws.com"
    viewer_protocol_policy = "https-only"
    default_ttl            = 0
    max_ttl                = 0
    min_ttl                = 0
    origin_domain_name     = "zb-me-prod.s3.us-east-1.amazonaws.com"
    origin_id              = "zb-me_prod.s3.us-east-1.amazonaws.com"
    acm_certificate_arn    = "arn:aws:acm:us-east-1:329599651317:certificate/80faf01b-bcc0-43d2-b7b9-02f83167c3aa"
  }
  "site_zb_cf_distribution" = {
    aliases                = ["site.zach-burkhart.me"]
    error_caching_min_ttl  = 500
    error_code             = "403"
    response_code          = "200"
    response_page_path     = "/index.html"
    cache_policy_id        = "CachingDisabled"
    target_origin_id       = "site-zb-prod.s3.us-east-1.amazonaws.com"
    viewer_protocol_policy = "https-only"
    default_ttl            = 0
    max_ttl                = 0
    min_ttl                = 0
    origin_domain_name     = "site-zb-prod.s3.us-east-1.amazonaws.com"
    origin_id              = "site-zb-prod.s3.us-east-1.amazonaws.com"
    acm_certificate_arn    = "arn:aws:acm:us-east-1:329599651317:certificate/f89067ef-0def-45ad-b610-2f01638718ef"
  }
}

cache_policies = {
  "CachingOptimized" = {
    comment       = "Policy with caching enabled. Supports Gzip and Brotli compression."
    default_ttl   = 300
    max_ttl       = 300
    min_ttl       = 0
    enable_brotli = true
    enable_gzip   = true
  },
  "CachingDisabled" = {
    comment       = "Policy with caching disabled"
    default_ttl   = 300
    max_ttl       = 300
    min_ttl       = 0
    enable_brotli = false
    enable_gzip   = false
  }
}

origin_access_control = {
  name             = "s3-oac"
  description      = "OAC for accessing S3 bucket"
  origin_type      = "s3"
  signing_behavior = "always"
  signing_protocol = "sigv4"
}

acm_certificates = {
  "zb_me_prod_acm_cert" = {
    domain_name       = "app.zach-burkhart.me"
    validation_domain = "zach-burkhart.me"
  },
  "site_zb_prod_cert" = {
    domain_name       = "zach-burkhart.me"
    validation_domain = "zach-burkhart.me"
  }
}

###############################################
#           Route53 Configuration             #
###############################################
# domain_name  = "zach-burkhart.me"
# subdomain    = "app.zach-burkhart.me"
# cname_target = "" #Replace with frontend CloudFront URL

###############################################
#        SSM Parameter Configuration          #
###############################################

ssm_parameters = {}

###############################################
#    Secret Manager Secrets Configuration     #
###############################################
secrets = {
  "example-kms-master-key" = {
    secret_recovery = 7
  }
}

###############################################
#   Simple Email Service (SES) Configuration  #
###############################################
domain_identities = [] #["fasten.cc"]

###############################
# Elastic Beanstalk Variables #
###############################

# el_bnstlk_env_name = "example-api-prod-env-active"

secrets.tf:
### Deploys Secret Manager Secret Resources ###
resource "aws_secretsmanager_secret" "secrets" {
  for_each = var.secrets

  name                    = each.key
  recovery_window_in_days = each.value.secret_recovery
  kms_key_id              = aws_kms_key.kms_master_key.id
}

### Deploys AWS Managed KMS Master Key Resource ###
resource "aws_kms_key" "kms_master_key" {
  deletion_window_in_days = 10
  enable_key_rotation     = true
  rotation_period_in_days = 90
}

route53.tf:
### Route53 Zones ###
resource "aws_route53_zone" "route53_primary_zone" {
  name = "zach-burkhart.me" # Replace with domain name
}

iam.tf:
### Create IAM Users ###
resource "aws_iam_user" "users" {
  for_each = { for user in var.iam_users : user.name => user }

  name = each.value.name
}

### Create IAM Groups ###
resource "aws_iam_group" "groups" {
  for_each = { for group in var.iam_groups : group.name => group }

  name = each.value.name

  depends_on = [aws_iam_user.users] # Ensure IAM users are created before assigning them to groups

}

### Add IAM Users to Groups ###
resource "aws_iam_user_group_membership" "user_groups" {
  for_each = { for user in var.iam_users : user.name => user }

  user   = each.value.name
  groups = each.value.groups
}

### Define IAM Policies ###
resource "aws_iam_policy" "policies" {
  for_each = { for policy in var.iam_policies : policy.name => policy }

  name   = each.value.name
  policy = each.value.policy_document
}

### Attach IAM Policies to Groups ###
resource "aws_iam_group_policy_attachment" "group_policies" {
  for_each = { for attachment in var.policy_attachments : "${attachment.group}-${attachment.policy}" => attachment }

  group      = aws_iam_group.groups[each.value.group].name
  policy_arn = aws_iam_policy.policies[each.value.policy].arn
}

providers.tf:
##########################
# AWS Providers          #
##########################
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = "us-east-1"
  default_tags {
    tags = {
      provisioner = "terraform"
    }
  }
}

provider "aws" {
  alias  = "us_east_2"
  region = "us-east-2"
  default_tags {
    tags = {
      provisioner = "terraform"
    }
  }
}



Plan for Prometheus/Grafana on EKS:
To set up Prometheus and Grafana using Terraform on AWS with EKS, follow these steps. I’ll outline the resources you’ll need, their relationships, and the order of operations. Then, I’ll integrate this with your existing Terraform setup.

### Order of Operations and Required AWS Resources

1. **VPC and Networking**:
   - Your `vpc.tf` already creates the VPC and related networking resources. Ensure your VPC has the correct CIDR blocks and subnets to accommodate EKS nodes and Prometheus/Grafana.

2. **EKS Cluster**:
   - **EKS Cluster Creation**:
     Define your EKS cluster in a new Terraform file, `eks.tf`.
   - **Node Groups**:
     Define your EKS node groups to ensure you have resources for running Prometheus and Grafana.
   - **IAM Roles**:
     Ensure IAM roles and policies for EKS, including node roles, are defined.

3. **Prometheus and Grafana Deployment**:
   - Use Helm charts to deploy Prometheus and Grafana to your EKS cluster. Helm charts simplify deployments and updates.

4. **IAM Policies and Roles**:
   - Define IAM policies for EKS to allow Prometheus and Grafana to interact with AWS services.

5. **Secrets and Configurations**:
   - Utilize Secrets Manager or SSM Parameter Store for storing sensitive information, such as database passwords or API keys.

6. **Security Groups and Access Control**:
   - Ensure proper security group settings for your EKS nodes and associated services.

### Terraform Configuration

#### 1. **Define EKS Cluster (`eks.tf`)**:

```hcl
# Define the EKS cluster
resource "aws_eks_cluster" "eks" {
  name     = "my-eks-cluster"
  role_arn  = aws_iam_role.eks_cluster_role.arn
  version   = "1.21"

  vpc_config {
    subnet_ids = aws_subnet.subnet[*].id
  }

  tags = {
    Name = "my-eks-cluster"
  }
}

# Define IAM role for EKS cluster
resource "aws_iam_role" "eks_cluster_role" {
  name = "eks-cluster-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "eks.amazonaws.com"
        }
      }
    ]
  })

  tags = {
    Name = "eks-cluster-role"
  }
}

# Attach policies to EKS role
resource "aws_iam_role_policy_attachment" "eks_cluster_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role     = aws_iam_role.eks_cluster_role.name
}

resource "aws_iam_role_policy_attachment" "eks_vpc_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
  role     = aws_iam_role.eks_cluster_role.name
}

# Define node group
resource "aws_eks_node_group" "eks_node_group" {
  cluster_name    = aws_eks_cluster.eks.name
  node_group_name = "eks-node-group"
  node_role_arn   = aws_iam_role.eks_node_role.arn
  subnet_ids      = aws_subnet.subnet[*].id
  scaling_config {
    desired_size = 2
    max_size     = 3
    min_size     = 1
  }

  tags = {
    Name = "eks-node-group"
  }
}

# Define IAM role for EKS nodes
resource "aws_iam_role" "eks_node_role" {
  name = "eks-node-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })

  tags = {
    Name = "eks-node-role"
  }
}

# Attach policies to EKS node role
resource "aws_iam_role_policy_attachment" "eks_node_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  role     = aws_iam_role.eks_node_role.name
}

resource "aws_iam_role_policy_attachment" "eks_cni_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  role     = aws_iam_role.eks_node_role.name
}
```

#### 2. **Deploy Prometheus and Grafana using Helm (`helm.tf`)**:

Install Helm provider and use it to deploy Prometheus and Grafana. You’ll need to have Helm installed on your local machine.

```hcl
provider "helm" {
  kubernetes {
    config_path = "~/.kube/config"
  }
}

# Define Prometheus Helm chart
resource "helm_release" "prometheus" {
  name       = "prometheus"
  repository = "https://prometheus-community.github.io/helm-charts"
  chart      = "prometheus"
  version    = "15.2.1"

  values = [
    file("prometheus-values.yaml")
  ]
}

# Define Grafana Helm chart
resource "helm_release" "grafana" {
  name       = "grafana"
  repository = "https://grafana.github.io/helm-charts"
  chart      = "grafana"
  version    = "6.56.0"

  values = [
    file("grafana-values.yaml")
  ]
}
```

Create `prometheus-values.yaml` and `grafana-values.yaml` for custom configurations.

#### 3. **IAM Policies for Monitoring Services**:
Ensure you have proper IAM policies attached to your EKS node role for Prometheus and Grafana to access necessary resources.

#### 4. **Secrets and Configurations**:
Add configurations and secrets needed for Prometheus and Grafana, if any.

#### 5. **Security Groups and Access Control**:
Ensure that security groups and network policies allow communication between Prometheus, Grafana, and EKS nodes.

### Integration with Existing Terraform Files

1. **VPC Configuration**:
   - Your `vpc.tf` already sets up networking. Ensure your subnets and VPC are correctly referenced in the EKS configuration.

2. **Secrets Manager (`secrets.tf`)**:
   - Ensure any required secrets for Prometheus and Grafana (e.g., database credentials) are stored and managed properly.

3. **IAM (`iam.tf`)**:
   - Add any additional IAM roles and policies needed for Prometheus and Grafana.

4. **Update `terraform.tfvars`**:
   - Ensure your `terraform.tfvars` file includes any additional configurations needed for EKS, Prometheus, and Grafana.

### Final Steps

1. **Initialize Terraform**:
   ```sh
   terraform init
   ```

2. **Apply Configuration**:
   ```sh
   terraform apply
   ```

3. **Verify Deployments**:
   - Check the EKS cluster status.
   - Verify that Prometheus and Grafana are successfully deployed and accessible.

This plan provides a structured approach to setting up Prometheus and Grafana on AWS with EKS using Terraform. Adjust configurations as needed based on your specific requirements.